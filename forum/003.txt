//------------------------------------------------------------//

# 1. 게시판 
- 글목록 조회 기능
- 상세페이지
- 글발행 기능
- 수정삭제 기능

//------------------------------------------------------------//



//------------------------------------------------------------//
## 1-4. 글 수정 기능
//------------------------------------------------------------//

수정기능 만들기
1. 글마다 수정버튼, 누르면 수정페이지 이동
2. 수정페이지 만들기(DB에서 글 가져와서 뿌리기)
3. 수정버튼 누르면 DB에 있던 글 수정

//------------------------------------------------------------//

1. 수정버튼
app/list/page.js
- Link 연결로 수정버튼 추가(수정페이지 이동)

2. 수정페이지
app/edit/[id]/page.js
- 수정페이지 작성
- props id로 들어가도록
- DB 연결에서 글 가져와서 defaultValue 로 input 뿌리기

3. DB 글수정

app/edit/[id]/page.js
- input style display none으로 해놓고 id 값 서버로 넘겨주기 위해서 해놓기
- toString()처리 해주기
- name _id 까먹지말기
- (참고) GET, POST 말고 PUT, DELETE 요청으로 서버와 통신가능한데ㅡ
PUT은 수정, DELETE는 삭제할 때 쓰면 좋은데 서버 api들 끼리 이쁘게 구분하기 위함이고 필수는 아님. 단점은 <form>으로 데이터 전송시 PUT, DELETE는 사용할 수 없어서 굳이 쓰고 싶으면 외부 라이브러리 설치하거나  해야함. 그래서 코드가 너무 길거나 그런게 아니면 <form>으로 데이터 전송시엔 일단 POST 요청 쓰는게 낫다고하는데..크흠

pages/api/post/edit.js
- 수정 PUT 사용해야하는데 간단한것은 일단 POST로 처리하기
- 수정 : updateOne({수정할게시물정보},{$set:{수정내용}});
- 수정할게시물정보는 id값으로 가져와야하는데, edit페이지에서 input창(display:none)해놓고, body._id 담아서 보내고
- 수정내용은 $set:요청.body 할경우에는 id,content,title 세개의 값이 들어가있기때문에, title과 content값만 넣어야하므로 수정변수를 만들어서 title,content 새로 담은 후에 넣어주기


//------------------------------------------------------------//

[nav]
app/layout.js
globals.css
- nav 추가 Link연결

//------------------------------------------------------------//


//------------------------------------------------------------//
## 1-5. 글 삭제
//------------------------------------------------------------//

app/list/page.js
- 자스애니메이션 적용할건데, 자바스크립트 문법 사용위해서 client component로 변경(전체x)
- list페이지 전체를 바꾸는건 검색엔진 등의 면에서 비효율적이기 때문에 
- 글목록 부분만 client로 바꾸기. ListItem 컴포넌트 만들고 list 페이지에서 import

app/list/ListItem.js
- ListItem.js 따로 자식 컴포넌트 만들어서 list page에서 props로 DB result보내주기
- props로 받은 것들 사용위해서 props.result~~ 다 붙여주기(편하게 쓰려면 destructuring 문법으로 {result} 이렇게 받아와서 사용하면 props 안붙여도됨)
- 이렇게 하면 검색엔진에 조금 더 친화적 (참고 : useEffect 사용할 경우, HTML 다 뿌리고서 넣어주기 때문에 검색엔진에 단점)
- form말고 fetch로 서버통신

1. 삭제버튼 누르면 서버로 삭제요청 보냄 (URL, method도 정하기)
2. 어떤 게시물 삭제할지 게시물 _id
3. 서버는 요청 들어오면 DB에서 그 게시물 삭제

pages/api/post/delete.js
- deleteOne() : document 1개 삭제
- id값 받아서 지우기
- ListItem에서 fetch body에 id값 보내주기

//------------------------------------------------------------//

삭제한 것 list 목록에서 사라지도록 애니메이션 
app/list/ListItem.js
- 애니메이션 opacity 조정 
- 단순 opacity 조정만 하면 div 박스 공간은 남아있기 때문에
- div 박스 none 처리 해주기

//------------------------------------------------------------//

[서버로 데이터 보내는 법]
1. fetch는 body에 넣기

2. form은 input에 넣기

3. query string
- fetch('/api/test?데이터이름=값&데이터=값값")
- { '데이터이름': '값', '데이터': '값값' }
- 서버에서 요청.query

4. URL parameter
- pages/api/abc/[id].js
- fetch('/api/abc/데이터전송')
- 서버에서 요청.query
- { id: '데이터전송' }

//------------------------------------------------------------//
