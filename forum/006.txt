//------------------------------------------------------------//

댓글기능 만들기
1. input 데이터 / 댓글 요청, 서버
2. useEffect 댓글 조회
3. 

//------------------------------------------------------------//

# 1. 댓글페이지 / 댓글저장
- 댓글 입력했을 때 새로고침 버튼 없이 반영되도록 하려면 client-component에서 Ajax 사용 필요
- Comment.js 만들고 detail.js 상세페이지에서 Comment 컴포넌트 import 해와서 사용
- 댓글 fetch 전송 / body담을때 body: JSON.stringify({ comment: comment, _id: _id }),
- 해당게시글id는 detail페이지에서 comment 컴포넌트에 props로 보내주기★

# 2. 댓글 서버
- api/comment/new.js
- 서버 만들어서 comment 컬렉션 새로 만들어서 넣기
- 넣을 때, 댓글내용/해당게시글id/댓글작성자(email 혹은 회원ObjectId) 담아서 넣기
- 게시물 작성자는 session으로 넣기

# 2-2. 그외
- 댓글 빈칸체크
- 댓글 로그인 여부 확인

# 3. 댓글 조회
- comment.js는 client component여서 직접 DB 데이터 못가져와서 서버에 데이터 요청해야함
- 이럴경우 검색노출 어려울수있지만, 댓글이라 나름 ㄱㅊ
- 장점은 댓글 html부분 새로고침없이 생성,수정,삭제 가능
-    useEffect(() => {
        fetch();
    }, [])
[useEffect]
- 특징1 : html로드/재렌더링 될 때마다 실행
  > ,[] : html 로드될 때 1회만 실행됨
- 특징2 : html 보여준 후에 늦게 실행시작(html 렌더링 후에 실행)
- 컴포넌트 html 보여주고 ajax 실행되는데 (UX적으로 더 나음)
- 1. 일단 html 내용 띄우고
- 2. ajax로 데이터 가져오기 
- 3. ajax 결과 html에 넣어주기

step
1. 컴포넌트 로드시 서버에서 댓글 가져옴
2. 가져온 데이터 state에 저장
3. state를 html에 넣어서 보여주기

//------------------------------------------------------------//

