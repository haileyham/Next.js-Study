//------------------------------------------------------------//

# 1. 게시판 
- 글목록 조회 기능
- 상세페이지
- 글발행 기능
- 수정삭제 기능

//------------------------------------------------------------//



//------------------------------------------------------------//
## 1-3. 글 발행 기능
//------------------------------------------------------------//

[글작성기능]
1. 글작성페이지 필요
2. 버튼 누르면 작성한 글 DB에 저장
- 바로 보내면 위험하기 때문에
- 중간프로그램을 둬서 빈글 등을 검사하는 곳을 만들어 DB에 글 보내는 방법 사용 해야 함
(3-tier architecture)
- 중간프로그램 : server

//------------------------------------------------------------//

[글작성기능]★★
1. 글작성페이지 필요
2. 버튼 누르면 서버에 글 저장하도록 부탁
3. 서버는 글 받으면 검사해보고 DB에 저장

//------------------------------------------------------------//

[서버] : 이거 해달라고 하면 해주는 프로그램
/url method
이런 요청하면 이런 코드 실행
/url method
저런 요청하면 저런 코드 실행

[mtehod 종류]
GET : 유저에게 데이터 전송
POST : 새로운 데이터 추가
PUT : 데이터 수정
DELETE : 데이터 삭제
PATCH : 데이터 수정


[next.js에서 서버개발]
(방법1) app/api폴더 만들어서 사용 -조금더 신버전문법인데, 아직 기능개발덜된것도있어서 밑에것 사용
(방법2) pages/api폴더 만들어서 사용 
> app폴더 안이 아니라 app폴더랑 같은 폴더 만들기 ★
> 사용할 때 미리보기 끄기 (ctrl+c / command+c 눌러서 끝냈다가 다시 실행)

//------------------------------------------------------------//
서버개발
//------------------------------------------------------------//

pages/api/test.js
유저가 /api/test로 GET/POST/PUT/DELETE/PATCH 요청하면, 파일안의 코드 실행해줌

http://localhost:3000/api/test
```
export default function handler(요청, 응답) {
    console.log(123);
    return 응답.status(200).json('처리완료')
}
```
서버는 기능실행 후에 유저에게 응답해야함
첫째파라미터 요청 : 요청과 관련된 정보
둘째파라미터 응답 : 응답도와줌
status : 100~500번대 satus code 검색해서 사용

//------------------------------------------------------------//
글작성 페이지
//------------------------------------------------------------//

app/write/page.js

```
import React from 'react'

export default function Write() {
    return (
        <div>
            <h1>글작성</h1>
            <form action="/api/test" method="POST">
                <button type="submit">등록</button>
            </form>
            <form action="/api/test" method="GET">
                <button type="submit">GET</button>
            </form>
        </div>
    )
}
```

등록 버튼을 누르면 /api/test로 POST 요청감
응담 잘됨
(POST/GET 만 쓸 수 있음)

//------------------------------------------------------------//

[서버에 GET / POST 요청오면 각각 다른 코드 실행하도록]
```

export default function handler(요청, 응답) {
    if (요청.method === "POST") {
        return 응답.status(200).json("포스트 처리완료")
    } else if (요청.method === "GET") {
        console.log(123);
        return 응답.status(200).json("겟겟 처리완료")
    }
}
```

//------------------------------------------------------------//


```
import { connectDB } from '@/util/database';
import React from 'react'

export default async function handler(요청, 응답) {
    const db = (await connectDB).db("forum");
    let result = await db.collection('post').find().toArray();

    // 글발행 요청
    if (요청.method === "POST") {
        return 응답.status(200).json(요청.body); //input(name="title") 입력한 것 출력
    }

    //DB에 있던 글들 모두 요청
    // else if (요청.method === "GET") {
    //     console.log(123);
    //     return 응답.status(200).json(result)
    // } 

    // 현재 날짜, 현재 시간 요청
    // else if (요청.method === "GET") {
    //     const date = new Date();
    //     return 응답.status(200).json(date)
    // }

    // 글발행 가져오기
    else if (요청.method === "GET") {
        return 응답.status(200).json(result)
    }
}
```
//------------------------------------------------------------//

[서버는 요청받으면 DB에 글 저장]
- app/write/page.js에서 
```
<form action="/api/post/new" method="POST">
    {/* 서버/api/post/new로 보내짐 > 유저가 /api/post/new로 요청시 실행됨 */}
    <input type="text" name="title" placeholder="글 제목" />
    <input type="text" name="content" placeholder="글 내용" />
</form>
```
- 유저가 input에 입력하고 버튼 누르면 /api/post/new 요청 > 실행됨

//------------------------------------------------------------//

pages/api/post/new.js
서버 요청시 실행될 코드들 작성
- POST 요청으로 
- 빈칸 방지
- 서버 에러
- 중복클릭(나중해보도록하기)

//------------------------------------------------------------//


