# MongoDB 회원가입 및 셋팅

# MongoDB 설치
npm install mongodb

# mongodb 연결
- util/databse.js에 셋팅코드
- page.js에서 위의 connectDB import
- 보안 .gitignore로 dburl 따로빼놓기

//------------------------------------------------------------//

# 1. 게시판 
- 글목록 조회 기능
- 상세페이지
- 글발행 기능
- 수정삭제 기능

//------------------------------------------------------------//



//------------------------------------------------------------//
## 1-1. 글목록 조회 기능
//------------------------------------------------------------//

처음 보는 세부기능 만들기 : 
1. 어떤 식으로 동작하는지 상세하게 한글로 설명
2. 코드로 짜기

//------------------------------------------------------------//

글 목록 페이지 / 기능
1. HTML 페이지 필요
2. 페이지 방문할 때 DB에서 글 꺼내오기
3. 글들 HTML 집어넣기

이렇게 해놔야 검색할 때도 편함
단순히 '게시판 어떻게 만들어요?'가 아닌
'MongoDB에서 글 꺼내는 법' 이렇게 검색 가능

//------------------------------------------------------------//

1. 글 목록 보여줄 HTML 페이지 : App/list/page.js

2. 페이지 방문할 때 DB에서 글 꺼내오기 
- 글 내용이 별로 없기 때문에 DB에다가 2번째 글 추가하고 오기(document)
```
const db = (await connectDB).db("forum");
let result = await db.collection('post').find().toArray();
```

3. HTML 집어넣기 : map으로 넣기

//------------------------------------------------------------//



//------------------------------------------------------------//
## 1-2. 상세페이지 만들기
//------------------------------------------------------------//

1. 글 제목 누르면 상세페이지 이동
2. 상세페이지 방문시 DB에서 글 1개 불러와서 HTML에 보여주기

//------------------------------------------------------------//

1. 글 제목 누르면 상세페이지 이동
- dynamic route 사용하면 비슷한 페이지 여러개 만들 필요 없음

[dyanamic route 만들기]
- app/detail/[폴더명]/page.js
- 폴더명 : 안에 아무거나 입력했을 때, page.js 보여줌
- 폴더명 한글로 사용하면 에러 발생, 영어사용(ㅠ혼자헤맴)
- /detail/1, /detail/2 접속 했을 때 각각 보여줌


2. 상세페이지 방문시 DB에서 글 1개 불러와서 HTML에 보여주기
```
let result = await db.collection('post').findOne({ _id: new ObjectId('64d9a316dce5a38bc6e45cc5') });
```
- DB에서 게시물 1개만 가져오려면 .findOne({찾을document정보 : _id값 가져와서 사용하기})
- { _id: new ObjectId('id값') }
- ObjectID import해오기
- 하드코딩 할 수 없으니, props로 부모 컴포넌트가 보낸것 받아서 넣기

```
let result = await db.collection('post').findOne({ _id: new ObjectId(props.params.id) });
console.log(props)
```
- http://localhost:3000/detail/1 유저가 URL에 입력한 값 출력은
- { params: { hello: '1' }, searchParams: { } }
- http://localhost:3000/detail/aaa { params: { hello: 'aaa' }, searchParams: {} }
- 유저가 detail/[id]/page.js에서 [id] 자리에 입력한 값을 출력 가능함
console.log(props.params.id)
- 이렇게 props.params.id 하면은 id값이 들어감
- 그러면 url에 id값 입력하면 해당 페이지를 보여주게 됨
- http://localhost:3000/detail/64d9a316dce5a38bc6e45cc5
- 하지만 유저가 직접 복잡한 id값을 입력할 수는 없으니, list에서 목록 하나 누를때마다 해당 id값 link 혹은 a로 넘어가기