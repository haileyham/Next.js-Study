# MongoDB 회원가입 및 셋팅

# MongoDB 설치
npm install mongodb

# mongodb 연결
- util/databse.js에 셋팅코드
- page.js에서 위의 connectDB import
- 보안 .gitignore로 dburl 따로빼놓기

//------------------------------------------------------------//

# 1. 게시판 
- 글목록 조회 기능
- 상세페이지
- 글발행 기능
- 수정삭제 기능

//------------------------------------------------------------//



//------------------------------------------------------------//
## 1-1. 글목록 조회 기능
//------------------------------------------------------------//

처음 보는 세부기능 만들기 : 
1. 어떤 식으로 동작하는지 상세하게 한글로 설명
2. 코드로 짜기

//------------------------------------------------------------//

글 목록 페이지 / 기능
1. HTML 페이지 필요
2. 페이지 방문할 때 DB에서 글 꺼내오기
3. 글들 HTML 집어넣기

이렇게 해놔야 검색할 때도 편함
단순히 '게시판 어떻게 만들어요?'가 아닌
'MongoDB에서 글 꺼내는 법' 이렇게 검색 가능

//------------------------------------------------------------//

1. 글 목록 보여줄 HTML 페이지 : App/list/page.js

2. 페이지 방문할 때 DB에서 글 꺼내오기 
- 글 내용이 별로 없기 때문에 DB에다가 2번째 글 추가하고 오기(document)
```
const db = (await connectDB).db("forum");
let result = await db.collection('post').find().toArray();
```

3. HTML 집어넣기 : map으로 넣기

//------------------------------------------------------------//



//------------------------------------------------------------//
## 1-2. 상세페이지 만들기1
//------------------------------------------------------------//

1. 글 제목 누르면 상세페이지 이동
2. 상세페이지 방문시 DB에서 글 1개 불러와서 HTML에 보여주기

//------------------------------------------------------------//

1. 글 제목 누르면 상세페이지 이동
- dynamic route 사용하면 비슷한 페이지 여러개 만들 필요 없음

[dyanamic route 만들기]
- app/detail/[폴더명]/page.js
- 폴더명 : 안에 아무거나 입력했을 때, page.js 보여줌
- 폴더명 한글로 사용하면 에러 발생, 영어사용(ㅠ혼자헤맴)
- /detail/1, /detail/2 접속 했을 때 각각 보여줌

//------------------------------------------------------------//

2. 상세페이지 방문시 DB에서 글 1개 불러와서 HTML에 보여주기

2-0.
```
let result = await db.collection('post').findOne({ _id: new ObjectId('64d9a316dce5a38bc6e45cc5') });
```
- DB에서 게시물 1개만 가져오려면 .findOne({찾을document정보 : _id값 가져와서 사용하기})
- { _id: new ObjectId('id값') }
- ObjectID import해오기
- 하드코딩 할 수 없으니, props로 부모 컴포넌트가 보낸것 받아서 넣기

//------------------------------------------------------------//

2-1.props.params.id
```
let result = await db.collection('post').findOne({ _id: new ObjectId(props.params.id) });
console.log(props)
```
- http://localhost:3000/detail/1 유저가 URL에 입력한 값 출력은
- { params: { hello: '1' }, searchParams: { } }
- http://localhost:3000/detail/aaa { params: { hello: 'aaa' }, searchParams: {} }
- 유저가 detail/[id]/page.js에서 [id] 자리에 입력한 값을 출력 가능함
console.log(props.params.id)
- 이렇게 props.params.id 하면은 id값이 들어감
- 그러면 url에 id값 입력하면 해당 페이지를 보여주게 됨
- http://localhost:3000/detail/64d9a316dce5a38bc6e45cc5
- 하지만 유저가 직접 복잡한 id값을 입력할 수는 없으니, list에서 목록 하나 누를때마다 해당 id값 link 혹은 a로 넘어가기

//------------------------------------------------------------//

2-2.
list/page.js 에서 link 달아주기
Link href={`/detail/${result[i]._id}`} 이렇게 

//------------------------------------------------------------//






//------------------------------------------------------------//
## 1-2-2. 상세페이지 만들기2
//------------------------------------------------------------//

[1] link 다른 방법도 있음
- client component 에서 가능한 방법
- list폴더안에 DetailLink.js 파일 만들고, 맨위에 'use client' 써서 client component
- (참고) 지금은 한번만 사용하지만, 나중에 여기저기서 많이 쓰일 것 같으면 바깥쪽으로 파일 빼놓고 사용하기

[2] 페이지 이동하는 다른 방법
- 컴포넌트 하나 만들고
- useRouter(); import 하여 변수에 담아 사용
{/* <button onClick={() => { router.push('/') }}>Button</button> */ }
- 온클릭 버튼에 router.push('이동할 경로')쓰면 페이지 이동
- '/' 홈페이지로 이동, '/list' list 페이지로 이동

{/* <button onClick={() => { router.prefetch('/detail/dfs') }}>페이지 미리로드</button> */ }
- 해당페이지 미리 로드하여, 후에 해당페이지 방문할 때 빠르게 로드 가능함
- 근데 Link 태그에도 prefetch 기능 내장되어 있음
- 스크롤 내리다가 Link 만나는 순간, 자동으로 페이지 미리 로드해줌
- 근데 Link 모두 미리 로드해놓기엔 부담될 수 있어서
- <Link prefetch={false} href="">해서 꺼놓을수도있음
- (참고) 개발중일때는 prefetch 확인불가, 나중에 사이트 발행하고 확인 가능

- useRouter는 client component에서만 사용가능하기 때문에
- server component에서 사용하고 싶으면, import해서 사용하기

//------------------------------------------------------------//

1. 여러페이지 만들때
- Dynamic route

2. 현재 URL 
- props / useRouter

3. 페이지 이동, prefetch 등
- useRouter

//------------------------------------------------------------//

[useRouter] 페이지이동
router.push('이동할페이지')
router.back()
router.forward()
router.refresh() -바뀐내용만 새로고침
router.prefetch('detail/safdfas') -페이지 미리로드(해당기능 Link태그에도 있음, 끄고싶으면 prefetch={false})

//------------------------------------------------------------//

페이지 이동 = useRouter();
현재URL출력 = usePathname();
SearchParameter출력 = useSearchParams();
user가dynamicRoute에입력한것출력 = useParams();

//------------------------------------------------------------//
