//------------------------------------------------------------//

다크모드

//------------------------------------------------------------//

- CSS속성중에 prefers-color-scheme(유저의 OS 테마에 맞춰서 CSS 적용)
- 유저가 자유롭게 전환 가능하도록

//------------------------------------------------------------//

# 1. 동적으로 바뀌는 UI 만들기
1. state 만들고 현재 UI 상태 보관
2. state에 따라서 UI가 어떻게 보일지 작성
3. 원할 때 state 변경

[state 단점]
- 새로고침시 기본값으로 리셋

[다른방법]
- 브라우저 저장공간 사용 (localStorage / Cookie)
- 다크모드 여부 DB 저장 / 페이지 접속시 DB에서 다크모드 / 다크인 경우 배경 조정하는 class 추가

//------------------------------------------------------------//

# 2. localStorage
- 브라우저 개발자도구 > application > localStorage
- 문자나 숫자데이터를 저장
- 사이트마다 5MB의 저장공간
- 유저가 브라우저 청소를 하지 않는 이상 반영구적으로 데이터를 저장가능
- (참고) session은 날라감 / object, array도 JSON으로 변환하면 저장가능
```
localStorage.setItem('자료이름', '값')
localStorage.getItem('자료이름')
localStorage.removeItem('자료이름')
```
- 자바스크립트 문법이기 때문에 client component에서만 사용가능
- next.js에서는
```
useEffect(()=>{
      if (typeof window != 'undefined') { //if문으로 체크한 이후 사용 가능 / 현재위치가 브라우저인지 서버인지 판단하는 조건문
      //client component에서 최대한 서버에서 미리 실행할거 실행하고 html도 렌더링해서 보내주려하는데 서버측에서 localStorage문법 발견하면 실행 안되니 에러나서 조건달음
        let res = localStorage.setItem('이름', 'kim')
      }
  },[])
```
- 서버 측에서 이 코드를 실행하게 되면 localStorage가 지원되지 않는 환경(서버 측)에서는 에러가 발생하기 때문. 따라서 이 코드를 클라이언트 측에서만 실행하도록 하는 것이 중요
- 단점 : useEffect에 넣어서 사용해야하는데, useEffect는 html 보여준 다음에 실행됨, localStorage '다크'로해도 라이트모드 먼저 보여주고 1초 후에 다크모드 됨

//------------------------------------------------------------//

# 3. Cookie
- 브라우저 개발자도구 > application > Cookie
- Cookie는 브라우저에 저장해둘 수 있는 짧은 문자열
- 사이트 하나 당 최대 50개, 총합 4kb까지의 문자데이터를 저장가능
(요즘 브라우저들은 이걸 초과해서 저장해도 봐줌)
- 유효기간을 설정가능. 유효기간 지나면 자동으로 삭제됨 
- 서버로 GET, POST 등 요청시 자동으로 서버로 전달
```
document.cookie = '쿠키이름=값' 
document.cookie = '쿠키이름=값; max-age=3600' //쿠키의 유효기간을 초 단위로 설정
cookies().get('name') //name한글말고 영어로 해둬야 잘 가져옴
```
- max-age=3600 이런 식으로 쿠키의 유효기간을 초 단위로 설정 가능
(위 코드 실행하면 24시간 후 쿠키가 삭제)
- 크롬에선 쿠키 유효기간으로 최대 400일까지
- 유효기간 안넣는 경우 브라우저 종료시 쿠키는 자동삭제
- 값들 사이에 ; 기호로 구분
- 가장 유용한 점 : server component나 서버 api 에서 쉽게 읽을 수 있다는 것
(쿠키는 GET, POST 등 요청시마다 서버로 전달되기 때문. 그래서 브라우저에 저장한 데이터를 DB 데이터처럼 html 렌더링 전에 바로 읽고 싶다면 cookie란에 보관해둬됨 그래서 서버사이드렌더링할 때 쿠키같은게 유용)
- 단점 : 단순 문자열만 저장가능해서 너무 길고 복잡한 데이터는 보관하기 불편할 수 있고, 항상 GET, POST 요청마다 전달되니 쓸데없는 네트워크 호스팅 비용도 늘어나는게 단점. but 간단한 다크모드 정도는 부담 딱히 없음
- 특정페이지 서버로 쿠키 전송안될경우 path=/추가 : document.cookie = 'mode=dark; max-age=' + (3600 * 24 * 400) + 'path=/' (원하는 /URL 접속시에만 해당 쿠키 전송)
 
//------------------------------------------------------------//

1. client component에서 cookie 만들라고 작성
- 쿠키 없을 경우에만 쿠키 생성하도록 조건문 추가
- 특정 쿠키 확인하는 코드 작성
2. server component에서 import { cookies } from 'next/headers'로 cookies() 사용하여 쿠키값 출력 가능 cookies().get('mode') //모드라는 이름의 쿠키값 가져옴
- 쿠키값에 따라서 class 부착
3. css
- 각 class명마다 background 조정
4. 변경버튼 / 새로고침
- state로 변경 가능한데, 이는 state 부분만 재렌더링
- router.refresh() 사용하기 / 변경부분 새로고침됨
- props로 쿠키불러온값 전송해서 사용하기