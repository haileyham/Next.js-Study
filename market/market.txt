# page.js
- 페이지 그려지는 곳
- 폴더 만들고 페이지 그릴 때마다 page.js
- component

# layout.js
- page.js 감싸는 것
- 공통 UI 있을 경우 넣어주기
- {children}이 page.js
- 인접한 layout.js 혹은 상위로 감싸짐

# Link
- a 태그와 같은 건데 조금 더 부드럽게 전환
- import 해서 사용
- css 에서는 a 로 사용해야 함

# globals.css
- 전체에 적용해줄 css
- html에 className
- jsx 인라인 css 할 경우 style = {{color : "font"}}
- 개별로 할 경우 파일명.module.css

# router
- 폴더 생성하면 자동으로 url
- /cart/payment 할 경우, app 폴더 안에 cart 폴더 안에 payment 안에 page.js

# map
- jsx에서 html 반복문
- 어레이.map((a,i)=>{return 10})
- a : array 자료 출력
- i : array 반복될 때마다 0부터 1씩 증가 정수
- map 반복문 사용시 key={i} 넣으면 좋음

# image / Image 최적화
- img 태그 사용
- 접근성 위해 alt 넣어주기
- 최적화 할 경우 Image 컴포넌트 import해서 사용, 경로는 각 이미지 import 해와야함
// 성능과 속도 측면에서 향상 됨
// 이미지 import 해서 사용하면
// 자동으로 이미지 lazy loading & 사이즈 최적화 & layout shift 방지
// layout shift는 이미지가 늦게 로딩될 때 밑에 요소가 올라오는 현상
// 단점 : 복잡하기 때문에 마지막이나 리팩할 때 적용함 보통은

# component
- 1. function 작명() { }
- 2. return (축약하고 싶은 것 넣기)
- 3. 작명한 것 html 안에 넣기
- 재사용할 코드 컴포넌트 만들기
- page.js 크게 만들 때

# client / server component
// 큰 페이지는 sever component
// 페이지 내에서 JS 기능 필요한 곳만 client component 
##client component
- onClick={()=>{}} 가넝
- useState, useEffect등 가넝
- 로딩속도 느림1(자바스크립트 많이 필요)
- 로딩속도 느림2(hydration 필요)
- hydration : html 유저에게 보낸 후에 자바스크립트로 html 다시 읽고 분석하는 일
## server component
- html에 자바스크립트 기능 넣기 불가능
- useState, useEffect등 사용불가
- 로딩속도 빠름
- 검색엔진 노출 유리
- 아무곳에나 만드는 것은 server component

# export / import
- export :
// 하나만 export 할 땐 export default
// 여러개 할 경우 export {age, 다른것,다른것..변수/함수명}
- import : 
// 하나 import 해올 때는 위에처럼 작명 마음대로 가능(근데 헷갈리지 않게 변수,함수명 그대로 쓰는 경향)
// 여러개 import 해올 때는 {age,다른것} 이런식으로 export한 변수,함수명 그대로 사용

# props
- 부모>자식 컴포넌트 데이터 전송
- 비슷한 컴포넌트 사용할 때 한번에
- props.머머
## deduplication
- Next.js에서는 deduplication가능

# useState
- let [안녕, set안녕] = useState([0,0,0])
## copy 
- 배열의 경우 복사본 만들어서 수량증감하기(참조기때문)
- [...원본]